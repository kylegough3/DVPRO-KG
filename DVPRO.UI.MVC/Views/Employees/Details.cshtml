@model DVPRO.DATA.EF.Models.Employee

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<divid ="details">
    <h4>Employee</h4>
<div class="row mt-2">
    <button class="col-md-2 btn btn-primary mx-2" id="copyButton">Copy to Clipboard</button>
    <button class="col-md-2 btn btn-primary mx-2" id="exportButton">Export to PDF</button>
</div>
    <hr />
    <dl class="row" id="Content">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Position)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Position)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Salary)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Salary)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HireDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HireDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TerminationDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TerminationDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Address)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Address)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.City)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.City)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.State)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.State)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PostalCode)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PostalCode)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Department.Location.Country.CountryName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Department.Location.Country.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Phone)
        </dt>
        <dd class = "col-sm-10">
            @{
                
                string phone = long.Parse(this.Model.Phone).ToString("(###) ###-####");

            }
            @*@Html.DisplayFor(model => model.Phone)*@
            @phone
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Department)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Department.DepartmentName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Manager)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Manager.FullName)
        </dd>
    </dl>
</divid>
<div>
    <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model?.EmployeeId">Edit</a>
    <a class="btn btn-primary" asp-action="Index">Back to List</a>
</div>




@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
    <script src="~/assets/vendor/jspdf/jspdf.js"></script>

    <script>
        document.getElementById('copyButton').addEventListener('click', function () {
            const dlElement = document.getElementById('Content');
            const textToCopy = dlElement.innerText;

            if (navigator.clipboard) {
                // Use the Clipboard API if available (modern browsers)
                navigator.clipboard.writeText(textToCopy)
                    .then(() => {
                        alert('Content copied to clipboard!');
                    })
                    .catch((error) => {
                        console.error('Failed to copy: ', error);
                    });
            } else {
                // Fallback for older browsers that do not support the Clipboard API
                const textField = document.createElement('textarea');
                textField.innerText = textToCopy;
                document.body.appendChild(textField);
                textField.select();
                document.execCommand('copy');
                document.body.removeChild(textField);
                alert('Content copied to clipboard!');
            }
        });
    </script>

    <script>
        document.getElementById("exportButton").addEventListener("click", function () {

            // Get the content to be exported
            const details = document.getElementById('details')


            // Options for the PDF export
            const options = {
                margin: 10,
                filename: 'exported.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2 },
                jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
            };

            // Generate the PDF
            html2pdf().from(details).set(options).save();
        });

    </script>
}